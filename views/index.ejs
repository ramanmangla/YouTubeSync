<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="" />
    <meta name="author" content="" />
    <link rel="icon" href="../../favicon.ico" />

    <title>YouTube Sync</title>

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet" />
    <link
      href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css"
      rel="stylesheet"
    />

    <!-- Custom styles for this template -->
    <link href="css/main.css" rel="stylesheet" />
  </head>

  <body>
    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button
            type="button"
            class="navbar-toggle collapsed"
            data-toggle="collapse"
            data-target="#navbar"
            aria-expanded="false"
            aria-controls="navbar"
          >
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Project name</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#wan">Button1</a></li>
            <li><a href="#too">Button2</a></li>
            <li><a href="#phree">Button3</a></li>
          </ul>
        </div>
        <!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container-fluid">
      <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
      <div id="player"></div>
      <div id="controls">
        <div>
          <button id="playVideo" type="button" class="btn btn-default">
            <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
          </button>
          <button id="pauseVideo" type="button" class="btn btn-default">
            <span class="glyphicon glyphicon-pause" aria-hidden="true"></span>
          </button>
        </div>
        <div id="progressBar">
          <div id="line"></div>
          <div id="marker"></div>
        </div>
      </div>
    </div>
    <!-- /.container -->

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js" type="text/javascript"></script>
    <script src="js/bootstrap.min.js"></script>
    <script>
      var socket = io();
      socket.on();

      // This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = 'https://www.youtube.com/iframe_api';
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // This function creates an <iframe> (and YouTube player)
      // after the API code downloads.
      var player;

      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '480',
          width: '800',
          videoId: '1v5KwZ76GIk',
          events: {
            onReady: onPlayerReady,
            onStateChange: onPlayerStateChange
          },
          playerVars: {
            controls: 0,
            disablekb: 1,
            modestbranding: 1,
            disablekb: 0,
            rel: 0
          }
        });
      }

      function initializeButtons() {
        $('#playVideo').on('click', event => {
          let data = { event: 'play', time: player.getCurrentTime() };
          socket.emit('playerEvent', data);
        });

        $('#pauseVideo').on('click', event => {
          let data = { event: 'pause', time: player.getCurrentTime() };
          socket.emit('playerEvent', data);
        });

        socket.on('playerEvent', function(data) {
          if (data.event == 'play') {
            player.playVideo();
          } else if (data.event == 'pause') {
            player.pauseVideo();
          } else {
            player.seekTo(data.time);
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        progressBarLoop();
        initializeButtons();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      function onPlayerStateChange(event) {
        console.log(event.data);
        if (event.data == YT.PlayerState.PLAYING) {
          // setTimeout(stopVideo, 6000);
          // done = true;
        }
      }

      function progressBarLoop() {
        var progressBar = $('#progressBar');
        var progressMarker = $('#marker');

        // On click event handler for seeking
        progressBar.on('click', event => {
          // Getting the relative left offset of mouse click
          // and seeking to the time
          let seekFraction =
            (event.pageX - progressBar.offset().left) / progressBar.width();
          let data = {
            event: 'seek',
            time: seekFraction * player.getDuration()
          };
          socket.emit('playerEvent', data);
        });

        // Update marker position
        setInterval(() => {
          // Marker position in fraction of total width of bar
          var markerPosition =
            (player.getCurrentTime() / player.getDuration()) * 100;
          progressMarker.css('left', String(markerPosition) + '%');
        }, 200);
      }
    </script>
  </body>
</html>
